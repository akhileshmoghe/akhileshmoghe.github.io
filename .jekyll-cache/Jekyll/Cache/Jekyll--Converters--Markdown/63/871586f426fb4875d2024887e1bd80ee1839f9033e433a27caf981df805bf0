I"6<h2 id="jetson-nano-bootloader-functionalities">Jetson Nano Bootloader functionalities:</h2>
<ul>
  <li>The primary function of the NVIDIA® Jetson Nano™ boot software is to initialize the SoC (System on a Chip), including:</li>
  <li>Initializing MC/EMC/CPU</li>
  <li>Setting up security parameters</li>
  <li>Loading different firmware</li>
  <li>Maintaining Chain of Trust</li>
  <li>Setting memory carveouts for different firmware</li>
  <li>Flashing the device</li>
  <li>Booting to the operating system
  Additionally, the Jetson Nano boot software also performs other operations defined by product requirements, including but not limited to:</li>
  <li>Initialization of HDMI™/DSI</li>
  <li>Displaying the boot logo</li>
</ul>

<p><img src="/assets/images/embedded/boot/jetson_nano_boot_sequence.png" alt="jetson_nano_boot_sequence" /></p>

<ul>
  <li><strong><em>BPMP???</em></strong>
    <ul>
      <li>BPMP is NVIDIA Tegra <em><u>Boot and Power Management Processor</u></em></li>
      <li>The BPMP is a specific processor in Tegra chip, which is designed for booting process handling and offloading the power management, clock management, and reset control tasks from the CPU.</li>
      <li>The BPMP firmware driver, which can create the interprocessor communication (IPC) between the CPU and BPMP.</li>
    </ul>
  </li>
</ul>

<h2 id="bootloader-components">Bootloader Components</h2>
<h3 id="0-bootrom">0. BootROM</h3>
<ul>
  <li>Jetson Nano BootROM (BR) is <em><u>hard-wired in the SoC</u></em>.</li>
  <li>It initializes the Boot Media and loads bootloaders and firmware from the Boot Media.</li>
  <li><strong><em>Boot Configuration Table (BCT)</em></strong>
    <ul>
      <li>Multiple copies of the BootROM Boot Configuration Table (BCT) may be stored <em><u>at the start of the Boot-Media</u></em>.</li>
      <li>The BCT contains configuration parameters used by the BootROM for hardware initialization.</li>
      <li>Bootloader info in BCT:
        <ul>
          <li>Size</li>
          <li>Entry point</li>
          <li>Load address</li>
          <li>Hash</li>
        </ul>
      </li>
    </ul>

    <p><img src="/assets/images/embedded/boot/bootrom-boot-flow.jpg" alt="bootrom-boot-flow" /></p>
  </li>
</ul>

<h3 id="1-tegraboot">1. TegraBoot</h3>
<ul>
  <li>TegraBoot (NVTBoot) is the <em><u>first boot software</u></em> component loaded by BootROM in <em><u>SysRAM (Internal RAM)</u></em>, and runs on BPMP.</li>
  <li>2 Types:
    <ul>
      <li>One used for <em><u>cold boot</u></em> (~hard boot:restart the board)</li>
      <li>One for <em><u>recovery boot/flashing</u></em></li>
    </ul>
  </li>
  <li>Responsibilities:
    <ul>
      <li>Loading and initializing firmware (FW) components such as <strong><em>TOS</em></strong>
        <ul>
          <li>TOS contains the <em><u>trusted OS binary</u></em>.</li>
        </ul>
      </li>
      <li>Creating carveouts
        <ul>
          <li>carveouts: It’s share memory for the coprocess.</li>
        </ul>
      </li>
      <li>Completing CPU initialization</li>
      <li>Loading the next stage bootloader</li>
      <li>Supporting flashing</li>
      <li>Supporting RCM boot
        <ul>
          <li>Recovery mode: used during flasing the board</li>
        </ul>
      </li>
      <li>Reading PMIC reset reason
        <ul>
          <li>PMIC: Power Management IC</li>
        </ul>
      </li>
      <li>Loading the bootloader device tree and passing the device tree load address to CBoot</li>
      <li>Stops execution when the CCPLEX is booted
        <ul>
          <li>CCPLEX: main CPU Complex, CCPLEX typically runs the system’s primary software stack.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-tegrboot-cpu">2. TegrBoot CPU</h3>
<ul>
  <li>Add rollback prevention.</li>
  <li>Using bootloader DTB(~device tree binary), perform EMC(~Electromagnetic Compatibility) training and update kernel DTB with training results.</li>
  <li>Pass control to CBoot.</li>
</ul>

<h3 id="3-cboot">3. CBoot</h3>
<ul>
  <li><em><u>Primary CPU bootloader</u></em> used on mobile platforms in the <em><u>cold boot</u></em> path.</li>
  <li>features:
    <ul>
      <li>Supports display and <em><u>boot logo/bmp splash</u></em></li>
      <li>Based on the <a href="https://github.com/littlekernel/lk"><strong><em>Little Kernel (LK) open source bootloader</em></strong></a></li>
      <li>Uses the interrupt and scheduling frameworks of LK</li>
      <li>Uses CDF for frameworks, drivers, and libraries</li>
    </ul>
  </li>
  <li>
    <p>BootLoader and kernel use separate device trees stored in separate partitions.</p>
  </li>
  <li>Responsibilities:
    <ul>
      <li>Parsing the CPU-BL parameters and initializing the bootloader device tree</li>
      <li>Chaining to U-Boot to boot the kernel</li>
      <li><em><u>Supporting the update mechanism</u></em></li>
      <li>Unhalts the BPMP so that the BPMP-FW can start running</li>
    </ul>
  </li>
</ul>

<h3 id="4-u-boot">4. U-Boot</h3>
<ul>
  <li>default OS bootloader for NVIDIA® Jetson™ L4T Driver Package.</li>
</ul>

<h2 id="partitions">Partitions</h2>
<ul>
  <li><strong><em>L4T</em></strong> supports formatting mass storage media(~SD cards, USB) into <em><u>multiple partitions</u></em> for storing data, such as the device <em><u>OS image</u></em>, <em><u>Bootloader image</u></em>, <em><u>device firmware</u></em>, and <em><u>Bootloader splash screens</u></em>.</li>
</ul>

<h3 id="partition-configuration-file">Partition Configuration file</h3>
<ul>
  <li>Located at <code class="language-plaintext highlighter-rouge">&lt;top&gt;/Linux_for_Tegra/bootloader/t210ref/cfg/</code> for Jetson Nano devices</li>
  <li>NVIDIA Jetson Nano (SKU 0000): flash_l4t_t210_max-spi_sd_p3448.xml</li>
  <li>NVIDIA Jetson Nano (SKU 0002): flash_l4t_t210_emmc_p3448.xml</li>
  <li>During the flashing procedure, <code class="language-plaintext highlighter-rouge">flash.sh</code> reads in the partition configuration file, translates keywords into values specified in <code class="language-plaintext highlighter-rouge">&lt;device&gt;.conf</code> or in option parameters and saves the data in <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code>.</li>
  <li>Then <code class="language-plaintext highlighter-rouge">__*bootloader/tegraflash.py*__</code> reads in <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code> and <em><u>performs actual flashing</u></em> as specified by <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code>.</li>
</ul>

<h3 id="partition-table-overview">Partition Table Overview</h3>
<ul>
  <li>Describe partition use for the <em><u>boot device</u></em> (~MicroSD Card, USB) on each supported platform.</li>
  <li>Not all Partiotions are really required.</li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp115285">Jetson Nano Development Module (P3448-0000) Flashed to On-Board Memory</a></li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp116068">Jetson Nano Development Module (P3448-0000) Flashed to Micro SD Card</a></li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp117730">Jetson Nano Production Module (P3448-0002)</a></li>
</ul>

<h2 id="bootloader-update">Bootloader Update</h2>

<h5 id="references">References:</h5>
<ul>
  <li><a href="https://www.youtube.com/watch?v=DV5S_ZSdK0s&amp;t=6s&amp;ab_channel=PentesterAcademyTV">Embedded Linux Booting Process (Multi-Stage Bootloaders, Kernel, Filesystem)</a></li>
</ul>

:ET