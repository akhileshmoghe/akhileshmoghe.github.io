I"Q<h3 id="summary"><em><u>Summary</u></em></h3>

<p>An Agile-Result-oriented software engineer focused on the Architecture, Design and implementation of IoT/Edge device/Cloud applications for devices updates &amp; data management. Successfully delivered 2 IoT projects in last 3.5 years with AWS IoT, Azure IoT, Ayla IoT, Mender.io platforms on ARM, x86 &amp; STM32 devices. Overall, 10 years of IT services &amp; Product development experience in IoT, Cloud &amp; Multimedia domains.</p>

<p><a class="button button--default button--rounded button--lg" href="/assets/docs/Resume-Akhilesh_Moghe_2021.pdf"><i class="fas fa-download"></i> Download as PDF</a></p>

<h3 id="projects"><em><u>Projects</u></em></h3>
<h4 id="edge-iot-framework-primarily-for-life-sciences-use-cases"><em><u>Edge IoT Framework primarily for Life Sciences Use-cases</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Solutions Architect (3 Months)</li>
  <li><strong><em>Skills</em></strong>: Service Oriented Architecture, <strong><em>Azure IoT Edge</em></strong>, <strong><em>AWS IoT Greengrass</em></strong>, <strong><em>Docker</em></strong>, <strong><em>Kubernetes</em></strong></li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Currently evaluating <strong><em>AWS Outpost</em></strong>, <strong><em>AWS EKS</em></strong>, <strong><em>Kubernetes</em></strong>, Containerized deployments, <strong><em>Apache Kafka</em></strong>, <strong><em>Pravega</em></strong>, Scalable <strong><em>MQTT brokers</em></strong> deployment to address <u>high volume sensors</u>, <u>high-definition video</u> data use-cases in <strong><em><u>5G</u></em></strong> Edge Computing scenarios.</li>
      <li>Worked on common <strong><em>Edge IoT use-cases</em></strong>, various possible scenarios considering data flows, data types, data restrictions, privacy, latency, bandwidth consumptions, connectivity restrictions, etc., primarily revolving around Life Sciences projects and devices.</li>
      <li>Evaluated Open-Source Edge Projects such as <strong><em>KubeEdge</em></strong>, <strong><em>ioFog</em></strong>, <strong><em>EdgeX</em></strong>, <strong><em>LF-Edge</em></strong> Umbrella projects against identified use-cases.</li>
      <li>Evaluated suitability of <strong><em>AWS IoT Greengrass</em></strong> and <strong><em>Azure IoT Edge</em></strong> + other AWS/Azure on-premises services for various Edge computing scenarios, presented pros &amp; cons of both public cloud platforms and created various possible use-cases architecture/design with AWS/Azure as primary components of framework.</li>
      <li>Architecting a common framework based on open-source Edge projects which can complement the public cloud services in on-premises Edge computing scenarios.</li>
    </ul>
  </li>
</ul>

<h4 id="jetson-nano-based-healthcare-iot-device-as-a-guided-pipetting-tip-sensing-system"><em><u>Jetson Nano based Healthcare IoT Device as a Guided Pipetting Tip Sensing System</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Systems Engineer (6 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Carried out PoC tasks like <strong><em>flashing boards</em></strong> to simulate mass flashing at factory.</li>
      <li>Multiple PoCs to understand customizing <strong><em>RootFS</em></strong>, <strong><em>Secure Boot</em></strong>, <strong><em>Bootloader Splash Screen</em></strong>.</li>
      <li>Interfacing <strong><em>Bluetooth module</em></strong> with <em><u>NVIDIA L4T BSP</u></em> software for <em><u>Jetson Nano</u></em>. All these PoC tasks resulted in a concrete plan to be executed at factory manufacturing.</li>
      <li>Evaluated, Designed and implemented <em><u>Firmware update</u></em> and <em><u>OS update</u></em> mechanism based on <strong><em>Mender-Yocto</em></strong> Open-Source project.</li>
      <li>Designed and implemented device side <strong><em>C++</em></strong> &amp; <strong><em>Python</em></strong>, <strong><em>RESTful</em></strong> HTTP protocol-based <strong><em>multiprocessor-distributed</em></strong> IoT connectivity application for features like <em><u>device identity</u></em> &amp; <em><u>registration</u></em>, <em><u>status</u></em>, *<u>user-device association<u>*, *<u>certificates management</u>*, *<u>device shadow</u>*.</u></u></li>
      <li>Evaluated different <strong><em>inter-process communication</em></strong> tools, <strong><em>RPC</em></strong> mechanisms as <strong><em>ROS1</em></strong>, <strong><em>ROS2</em></strong>, <strong><em>D-Bus</em></strong>, <strong><em>ZMQ</em></strong> to Architect &amp; Design multiprocessor-distributed application.</li>
    </ul>
  </li>
</ul>

<h4 id="stm32-mcu-based-portable-covid-19-diagnostic-device-kit"><em><u>STM32 MCU based Portable COVID-19 Diagnostic device kit</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Firmware Developer (4 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Designed and Implemented <em><u>STM32F407</u></em> based MCU <strong><em>firmware</em></strong> to achieve <strong><em>USB communication</em></strong> with Android app using <strong><em>Virtual COM Port</em></strong>, <strong><em>Flash memory read/write</em></strong> and <strong><em>PWM generation</em></strong>.</li>
      <li>Created a dummy <em><u>test application</u></em> in Python to automate the testing of STM32 firmware.</li>
      <li>Received “<strong><em>Bravo Award</em></strong>” for the delivering the project in <em><u>3 months</u></em>.</li>
      <li>
        <p><a href="https://nicoyalife.com/blog/nicoya-portable-covid-19-diagnostic-test-additional-fund/?utm_medium=organic_social&amp;utm_source=Twitter&amp;utm_campaign=atlas_additional_fund&amp;utm_content=blog_promo">Client Received $2 Million funding to continue development based on our Project</a>.</p>

        <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Check out my iOS game, High5! <a href="https://t.co/QZEKLg3G2i">https://t.co/QZEKLg3G2i</a></p>&mdash; Keita Ito (@keitaitok) <a href="https://twitter.com/Nicoya_Life/status/1398026234039312390">August 26, 2014</a></blockquote>
        <script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
      </li>
    </ul>
  </li>
</ul>

<h4 id="ota-firmware-updates-for-a-stm32-mcus-and-full-os-updates-for-x86-carrier-boards"><em><u>OTA Firmware Updates for a STM32 MCUs and full OS Updates for x86 carrier boards</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: IoT Developer (14 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Designed and implemented <strong><em>custom bootloader</em></strong> with <strong><em>Dual bank</em></strong> strategy for <em><u>STM32F407 MCU</u></em> to achieve robust <em><u>Firmware update</u></em> requirements. <strong><em>MAVLink</em></strong> communication protocol and <em><u>Signature &amp; checksum verification</u></em> were few of the other key features implemented.</li>
      <li>Designed &amp; developed <strong><em>C++</em></strong> &amp; <strong><em>Python</em></strong> based <strong><em>multithreaded multiprocessor-distributed</em></strong> application to achieve <strong><em>OTA firmware update</em></strong> for multiple STM32 MCUs. <strong><em>AWS IoT Jobs</em></strong>, <strong><em>Device Shadow</em></strong>, <strong><em>Secure communication</em></strong> and UART based <em><u>serial communication</u></em> were key features.</li>
      <li>PoC for <strong><em>full OS image</em></strong> and <strong><em>Application update</em></strong> using <strong><em>Mender.io</em></strong> Open-Sorce project. <em><u>Full OS OTA updates</u></em> with Mender server hosted on <strong><em>AWS EC2</em></strong>. Also, same kind of <em><u>updates with USB and over LAN</u></em> were also achieved with local Python server.</li>
      <li>Evaluated and finalized <strong><em>Ayla IoT platform</em></strong> for early market release without full fledge cloud development. <em><u>Device provisioning</u></em>, <em><u>status</u></em>, <em><u>firmware updates</u></em> to multiple devices, sensor <em><u>data streaming</u></em> were key features achieved in <em><u>4 months duration</u></em>.</li>
      <li>Designed and implemented a <strong><em>NodeJS module</em></strong> for <em><u>Data Synchronization</u></em> between device and cloud using <strong><em>MongoDB Realm</em></strong> and <strong><em>MongoDB Atlas</em></strong> cloud databases. Understanding of new platform and successful delivery was achieved in <em><u>3 months</u></em>.</li>
      <li>
        <p>Multiple product devices are deployed in the field <a href="https://nicoyalife.com/products/spr-instruments/alto/">Product Demo</a>.</p>

        <iframe width="665" height="374" src="https://www.youtube.com/embed/RF7Anut-yQA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      </li>
    </ul>
  </li>
</ul>

<h4 id="drone-based-asset-inspection-with-aws-iot-greengrass--aws-robomaker-services"><em><u>Drone-based Asset Inspection with AWS IoT Greengrass &amp; AWS Robomaker Services</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Robotics, IoT Developer (8 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Understanding of the new to be launched or recently launched <strong><em>AWS Services</em></strong> like <strong><em>Robomaker</em></strong>, <strong><em>Greengrass</em></strong>, <strong><em>AWS IoT</em></strong> and their use-cases for Robotics projects were achieved in <em><u>3 months</u></em> with demonstratable applications as an outcome.</li>
      <li><strong><em>Robotics framework ROS</em></strong> based <strong><em>distributed application</em></strong> had <em><u>Machine Learning</u></em> features like <em><u>Rust and leakage detection models</u></em> that were deployed with <strong><em>AWS IoT Greengrass</em></strong> to multiple devices as <strong><em>NVIDIA Jetson TX2</em></strong> (<em><u>drone</u></em>), <em><u>mobile robots</u></em> and <em><u>x86</u></em> machines.</li>
      <li><strong><em>AWS IoT device shadow</em></strong> updates and <strong><em>IoT Jobs</em></strong> for <em><u>firmware update</u></em> were also used.</li>
      <li><strong><em>AWS Lambda</em></strong> functions were deployed to AWS IoT Greengrass to run <em><u>ML inference</u></em>.</li>
      <li>Robotics application was able to <em><u>capture and upload</u></em> the <strong><em>thermal</em></strong> and normal <strong><em>camera videos</em></strong> to <strong><em>AWS S3</em></strong> buckets, which were consumed by <strong><em>AWS Sagemaker</em></strong> for Machine Learning training.</li>
      <li><strong><em>NodeJS</em></strong>, <strong><em>JavaScript</em></strong> based Web Application running on <strong><em>AWS EC2</em></strong> was developed to control Robots with <em><u>commands</u></em>, to trigger <em><u>firmware updates</u></em>, and to initiate <em><u>ML training in Sagemaker</u></em>.</li>
      <li>Camera Live video streams were transmitted to <strong><em>AWS Kinesis Video Streams</em></strong> and the same were rendered on Web Application in <strong><em>HLS format</em></strong>.</li>
      <li><a href="https://www.youtube.com/watch?v=LYWVF4bGHjs&amp;t=558s&amp;ab_channel=AWSOnlineTechTalks">Drone simulation around oil-rig running in background in AWS official Tech Talk</a></li>
      <li>
        <p><a href="https://twitter.com/QuetzalliAle/status/1137016252046594050?s=20">Demos were successfully showcased at CERAWeek 2019 and AWS re:MARS 2019 events</a></p>

        <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Check out my iOS game, High5! <a href="https://t.co/QZEKLg3G2i">https://t.co/QZEKLg3G2i</a></p>&mdash; Keita Ito (@keitaitok) <a href="https://twitter.com/QuetzalliAle/status/1137016252046594050?s=20">August 26, 2014</a></blockquote>
        <script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
      </li>
    </ul>
  </li>
</ul>

<h4 id="robotics-device-management-effort-estimation--proposal-creation"><em><u>Robotics Device Management Effort Estimation &amp; Proposal Creation</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Developer (2 Months)</li>
  <li><strong><em>Responsibilities</em></strong>:
    <ul>
      <li>Understand the Product Requirements</li>
      <li>Understand various <strong><em>Azure IoT</em></strong> &amp; other Cloud services and mapping them to Product Requirements.</li>
      <li>Create an Overview <strong><em>ROS</em></strong> &amp; Azure Cloud based <strong><em>Architecture</em></strong> using <strong><em>Docker Container</em></strong>.</li>
      <li>Create <strong><em>Docker Containerized ROS Demo applications</em></strong> running on x86 Linux machine <em><u>accessing connected peripheral devices, file system</u></em>.</li>
      <li>Create <strong><em>complexity sheet</em></strong> with various modular tasks to arrive at an <strong><em>effort estimation</em></strong>.</li>
      <li>Coordinate with other Product teams involved.</li>
    </ul>
  </li>
</ul>

<h4 id="robotics-ros-framework-packages-migration"><em><u>Robotics ROS Framework Packages Migration</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Developer (6 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Understand the Open-Source Robotics frameworks <strong><em>ROS1</em></strong> &amp; <strong><em>ROS2</em></strong>.</li>
      <li>Understand Robotics &amp; Cloud Packages with respect to original architecture and implementations of assigned package.</li>
      <li>Create package architecture with respect to new ROS2 framework, Migrate packages from ROS1 framework to ROS2 framework.</li>
      <li>Follow up &amp; Interact with Open-Source community, accommodate community suggestion.</li>
      <li>Get the migration work Reviewed &amp; Accepted by the Community members.</li>
      <li>Successfully migrated <strong><em>vision-opencv</em></strong> ROS package.</li>
    </ul>
  </li>
</ul>

<h4 id="ibm-content-collector-part-of-ibm-enterprise-content-management"><em><u>IBM Content Collector (part of IBM Enterprise Content Management)</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Module Lead Engineer (18 Months)</li>
  <li><strong><em>Responsibilities</em></strong>:
    <ul>
      <li>Module Lead Engineer for IBM Content Collector for Email (primarily for IBM Notes/Domino).</li>
      <li>Developed Domino &amp; Notes Application for Content Collector Expiration Manager module using Lotus Scripts.</li>
      <li>Debugged and resolved multiple server-side crashes, which improved stability of the product. resulting in retaining the customer to continue use IBM Domino/Notes applications.</li>
      <li>Solved crucial Application Recovery issue with Email Connector module, that had seriously hampered overall product usability in case of unavoidable server-side crash.</li>
      <li>Debugged and solved build issues with JNI exports in DLLs that caused intermittent application hang problem.</li>
      <li>Thoroughly Analyzed the crash reports and provided sufficient evidence to prove the issues with 3rd party components/APIs.</li>
      <li>Debugged ANT based build structure to resolve build issues.</li>
    </ul>
  </li>
</ul>

<h4 id="webmeeting-screen-sharing-application-for-mac-and-windows"><em><u>WebMeeting (Screen Sharing Application) for MAC and Windows</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Backend Developer (26 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li>Received “<strong><em><u>You Made a Difference Award</u></em></strong>” for the extensive work done in the initial phase of the project, which helped the team to scale up and gain Client’s Confidence.</li>
      <li>Understood the <strong><em>Chromium Open-Source Project</em></strong> relevant modules, build systems which can be reused to create a <strong><em>cross-platform</em></strong> (Windows &amp; MAC) Screen Sharing application which used <strong><em>VP8 video codec</em></strong> and <strong><em>WebM packetizer</em></strong>. Demonstrated the key functionality of screen sharing in <em><u>3 months</u></em>.</li>
      <li>Evaluated and <strong><em>AWS S3</em></strong>, Dropbox, Google Drive for <em><u>file sharing</u></em> capabilities, but Client did not pursue another cloud platform and file share was implemented with Firebase &amp; PubNub.</li>
      <li>Designed and developed <strong><em>HTTP transport module</em></strong> for <em><u>screen sharing data</u></em> + <em><u>Chats</u></em> + <em><u>File sharing</u></em> modules with <strong><em>Firebase</em></strong> &amp; <strong><em>PubNub</em></strong> cloud platforms.</li>
      <li>Later, it was developed into a full-fledged product with multiple browsers supports + Chat, file share, recording capabilities.</li>
      <li>PoC application was developed for <strong><em>Image &amp; Text Detection</em></strong> in screen share data using an open-source library.</li>
      <li>
        <p>The core screen sharing product <a href="https://www.conferencecalling.com/screen-sharing">WebMeeting</a> is still in production.</p>

        <iframe width="560" height="315" src="https://www.youtube.com/embed/lV_iqJLWnUA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      </li>
    </ul>
  </li>
</ul>

<h4 id="porting-webrtc-based-gchat-application-on-linux--android-platforms"><em><u>Porting WebRTC based GChat Application on Linux &amp; Android Platforms</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: Backend Software Developer (20 Months)</li>
  <li><strong><em>Accomplishments</em></strong>:
    <ul>
      <li><em><u>The product was successfully showcased in CES2012-13 by the customers</u></em>.
<strong><em>Responsibilities</em></strong>:</li>
      <li>Set Top Box, <strong><em>TI BeagleBone, Panda ARM board bring</em></strong> up with <em><u>Linux/Android OS images</u></em>.</li>
      <li>Building &amp; Porting <strong><em>WebRTC</em></strong> code for different <strong><em>Linux, Android Set top boxes</em></strong>.</li>
      <li>Dealing with all kinds of <em><u>compile</u></em> and <em><u>run-time errors</u></em> on every platform.</li>
      <li>Modifying WebRTC GYP build structure for integrating platform specific <em><u>Codec and Camera Libraries</u></em>.</li>
      <li><em><u>Integrating</u></em> <strong><em>H264 Decoder-Renderer</em></strong> APIs with WebRTC code.</li>
      <li><em><u>Integrating</u></em>/Testing Quanta and Maxim <em><u>Camera modules in the applications</u></em>.</li>
      <li>Debugged <strong><em>H264 Decoder</em></strong>, <strong><em>YUV-RGB Render</em></strong> modules for Linux, Android platforms.</li>
      <li>Thorough Unit Testing &amp; Bug Fixing.</li>
    </ul>
  </li>
</ul>

<h4 id="ilfs-science-exploriments"><em><u>IL&amp;FS Science Exploriments</u></em>:</h4>
<ul>
  <li><strong><em>Role</em></strong>: iOS Developer (5 Months)</li>
  <li><strong><em>Responsibilities</em></strong>:
    <ul>
      <li>Developed Educational iPad Applications, to demonstrate &amp; help students to understand the different Physics Laws. These Applications are simulations of the Physics Experiments on iPad.</li>
      <li>Implemented the Core functionality with <strong><em>Model-View-Controller (MVC) Architecture</em></strong>.</li>
      <li>Implemented different Physics formulas</li>
      <li>Implemented Animation in the application with <strong><em>Cocoa Framework</em></strong>.</li>
      <li>Thorough Unit testing &amp; Bug Fixing</li>
      <li>
        <p><a href="https://www.148apps.com/app/483896866/">Exploriments - Fluids - Archimedes Principle, Buoyancy and Flotation</a></p>

        <iframe width="499" height="374" src="https://www.youtube.com/embed/0-Ml5odp-Uw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      </li>
      <li>
        <p><a href="https://www.148apps.com/app/503129151/">Exploriments – Pendulum - Effect of Length, Mass, Amplitude and Gravity on Oscillatory Motion of a Simple Pendulum</a></p>

        <iframe width="499" height="374" src="https://www.youtube.com/embed/Nz1AEbu7XHU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      </li>
    </ul>
  </li>
</ul>
:ET