I"Æ/<h2 id="jetson-nano-bootloader-functionalities">Jetson Nano Bootloader functionalities:</h2>
<ul>
  <li>The primary function of the NVIDIAÂ® Jetson Nanoâ„¢ boot software is to initialize the SoC (System on a Chip), including:</li>
  <li>Initializing MC/EMC/CPU</li>
  <li>Setting up security parameters</li>
  <li>Loading different firmware</li>
  <li>Maintaining Chain of Trust</li>
  <li>Setting memory carveouts for different firmware</li>
  <li>Flashing the device</li>
  <li>Booting to the operating system
  Additionally, the Jetson Nano boot software also performs other operations defined by product requirements, including but not limited to:</li>
  <li>Initialization of HDMIâ„¢/DSI</li>
  <li>Displaying the boot logo</li>
</ul>

<p><img src="/assets/images/embedded/boot/jetson_nano_boot_sequence.png" alt="jetson_nano_boot_sequence" /></p>

<ul>
  <li><strong><em>BPMP???</em></strong>
    <ul>
      <li>BPMP is NVIDIA Tegra <em><u>Boot and Power Management Processor</u></em></li>
      <li>The BPMP is a specific processor in Tegra chip, which is designed for booting process handling and offloading the power management, clock management, and reset control tasks from the CPU.</li>
      <li>The BPMP firmware driver, which can create the interprocessor communication (IPC) between the CPU and BPMP.</li>
    </ul>
  </li>
</ul>

<h2 id="bootloader-components">Bootloader Components</h2>
<h3 id="0-bootrom">0. BootROM</h3>
<ul>
  <li>Jetson Nano BootROM (BR) is <em><u>hard-wired in the SoC</u></em>.</li>
  <li>It initializes the Boot Media and loads bootloaders and firmware from the Boot Media.</li>
  <li><strong><em>Boot Configuration Table (BCT)</em></strong>
    <ul>
      <li>Multiple copies of the BootROM Boot Configuration Table (BCT) may be stored <em><u>at the start of the Boot-Media</u></em>.</li>
      <li>The BCT contains configuration parameters used by the BootROM for hardware initialization.</li>
      <li>Bootloader info in BCT:
        <ul>
          <li>Size</li>
          <li>Entry point</li>
          <li>Load address</li>
          <li>Hash</li>
        </ul>
      </li>
    </ul>

    <p><img src="/assets/images/embedded/boot/bootrom-boot-flow.jpg" alt="bootrom-boot-flow" /></p>
  </li>
</ul>

<h3 id="1-tegraboot">1. TegraBoot</h3>
<ul>
  <li>TegraBoot (NVTBoot) is the <em><u>first boot software</u></em> component loaded by BootROM in <em><u>SysRAM (Internal RAM)</u></em>, and runs on BPMP.</li>
  <li>2 Types:
    <ul>
      <li>One used for <em><u>cold boot</u></em> (~hard boot:restart the board)</li>
      <li>One for <em><u>recovery boot/flashing</u></em></li>
    </ul>
  </li>
  <li>Responsibilities:
    <ul>
      <li>Loading and initializing firmware (FW) components such as <strong><em>TOS</em></strong>
        <ul>
          <li>TOS contains the <em><u>trusted OS binary</u></em>.</li>
        </ul>
      </li>
      <li>Creating carveouts
        <ul>
          <li>carveouts: Itâ€™s share memory for the coprocess.</li>
        </ul>
      </li>
      <li>Completing CPU initialization</li>
      <li>Loading the next stage bootloader</li>
      <li>Supporting flashing</li>
      <li>Supporting RCM boot
        <ul>
          <li>Recovery mode: used during flasing the board</li>
        </ul>
      </li>
      <li>Reading PMIC reset reason
        <ul>
          <li>PMIC: Power Management IC</li>
        </ul>
      </li>
      <li>Loading the bootloader device tree and passing the device tree load address to CBoot</li>
      <li>Stops execution when the CCPLEX is booted
        <ul>
          <li>CCPLEX: main CPU Complex, CCPLEX typically runs the systemâ€™s primary software stack.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-tegrboot-cpu">2. TegrBoot CPU</h3>
<ul>
  <li>Add rollback prevention.</li>
  <li>Using bootloader DTB(~device tree binary), perform EMC(~Electromagnetic Compatibility) training and update kernel DTB with training results.</li>
  <li>Pass control to CBoot.</li>
</ul>

<h3 id="3-cboot">3. CBoot</h3>
<ul>
  <li><em><u>Primary CPU bootloader</u></em> used on mobile platforms in the <em><u>cold boot</u></em> path.</li>
  <li>features:
    <ul>
      <li>Supports display and <em><u>boot logo/bmp splash</u></em></li>
      <li>Based on the <a href="https://github.com/littlekernel/lk"><strong><em>Little Kernel (LK) open source bootloader</em></strong></a></li>
      <li>Uses the interrupt and scheduling frameworks of LK</li>
      <li>Uses CDF for frameworks, drivers, and libraries</li>
    </ul>
  </li>
  <li>
    <p>BootLoader and kernel use separate device trees stored in separate partitions.</p>
  </li>
  <li>Responsibilities:
    <ul>
      <li>Parsing the CPU-BL parameters and initializing the bootloader device tree</li>
      <li>Chaining to U-Boot to boot the kernel</li>
      <li><em><u>Supporting the update mechanism</u></em></li>
      <li>Unhalts the BPMP so that the BPMP-FW can start running</li>
    </ul>
  </li>
</ul>

<h3 id="4-u-boot">4. U-Boot</h3>
<ul>
  <li>default OS bootloader for NVIDIAÂ® Jetsonâ„¢ L4T Driver Package.</li>
</ul>

<h2 id="partitions">Partitions</h2>
<ul>
  <li><strong><em>L4T</em></strong> supports formatting mass storage media(~SD cards, USB) into <em><u>multiple partitions</u></em> for storing data, such as the device <em><u>OS image</u></em>, <em><u>Bootloader image</u></em>, <em><u>device firmware</u></em>, and <em><u>Bootloader splash screens</u></em>.</li>
</ul>

<h3 id="partition-configuration-file">Partition Configuration file</h3>
<ul>
  <li>Located at <code class="language-plaintext highlighter-rouge">&lt;top&gt;/Linux_for_Tegra/bootloader/t210ref/cfg/</code> for Jetson Nano devices</li>
  <li>NVIDIA Jetson Nano (SKU 0000): flash_l4t_t210_max-spi_sd_p3448.xml</li>
  <li>NVIDIA Jetson Nano (SKU 0002): flash_l4t_t210_emmc_p3448.xml</li>
  <li>During the flashing procedure, <code class="language-plaintext highlighter-rouge">flash.sh</code> reads in the partition configuration file, translates keywords into values specified in <code class="language-plaintext highlighter-rouge">&lt;device&gt;.conf</code> or in option parameters and saves the data in <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code>.</li>
  <li>Then <code class="language-plaintext highlighter-rouge">__*bootloader/tegraflash.py*__</code> reads in <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code> and <em><u>performs actual flashing</u></em> as specified by <code class="language-plaintext highlighter-rouge">bootloader/flash.xml</code>.</li>
</ul>

<h3 id="partition-table-overview">Partition Table Overview</h3>
<ul>
  <li>Describe partition use for the <em><u>boot device</u></em> (~MicroSD Card, USB) on each supported platform.</li>
  <li>Not all Partiotions are really required.</li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp115285">Jetson Nano Development Module (P3448-0000) Flashed to On-Board Memory</a></li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp116068">Jetson Nano Development Module (P3448-0000) Flashed to Micro SD Card</a></li>
  <li><a href="https://docs.nvidia.com/jetson/l4t/Tegra%20Linux%20Driver%20Package%20Development%20Guide/part_config.html#wwp117730">Jetson Nano Production Module (P3448-0002)</a></li>
</ul>

<h2 id="bootloader-update">Bootloader Update</h2>
<ul>
  <li>NVIDIAÂ® Jetsonâ„¢ Nano platform use the <strong><em>Debian package</em></strong> facility to update Bootloader.</li>
  <li><strong><em>Dual Boot Strategy</em></strong>
    <ul>
      <li><em><u>Ensures that a usable Bootloader partition exists at all times during an update</u></em>.</li>
    </ul>
  </li>
</ul>

<h3 id="bootloader-components-validation--partition-layout">Bootloader Components Validation &amp; Partition Layout</h3>
<ul>
  <li><strong>Boot Configuration Table</strong> (BCT) is stored in a partition named BCT.</li>
  <li>The NVIDIA flashing utility <code class="language-plaintext highlighter-rouge">tegraflash.py</code> writes up to <em><u>64 instances of the BCT</u></em>.
    <h4 id="bootloader-validation"><em><u>Bootloader Validation</u></em>:</h4>
  </li>
  <li><strong>BootROM</strong> validates the BCT through an <em><u>integrated checksum</u></em> or <em><u>RSA signature</u></em>.</li>
  <li>If the calculated checksum or signature does not match the value in the BCT located at the beginning of the partition, the BootROM attempts to validate the next instances of the BCT.</li>
  <li>When <strong>BootROM</strong> finds a valid set of checksums or signatures, it transfers control to the specified instance of TegraBoot.</li>
  <li><strong>TegraBoot</strong> computes and <em><u>validates the checksums</u></em> for the first <strong>BFS</strong> and the first <strong>KFS</strong> and the signatures the individual files. When the checksums and signatures have been validated, TegraBoot loads the appropriate boot files,
    <ul>
      <li><strong>BFS</strong>: a set of all of the files in a group of partitions that are concerned with booting.
        <ul>
          <li>The TegraBoot CPU binary</li>
          <li>DTB files used by Bootloader</li>
        </ul>
      </li>
      <li><strong>KFS</strong>: a set of all of the files in a group of partitions that are concerned with loading the kernel.
        <ul>
          <li>DTB files used by the kernel</li>
          <li>Warmboot binary</li>
          <li>Trusted OS image</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>After validation, TegraBoot transfers control to the boot loader, e.g. <strong>CBoot</strong>.</li>
  <li>The CBoot loader validates and loads the next-level software component, such as the <strong>Linux kernel</strong> or <strong>Uâ€‘Boot</strong>.</li>
  <li>If TegraBoot <em><u>fails to validate</u></em> the first BFS andKFS, it <em><u>overwrites itself</u></em> and <em><u>resets the board</u></em> so that the BootROM can validate and load the next set of TegraBoot, BFS, and KFS.</li>
</ul>

<h4 id="partition-layout"><em><u>Partition Layout</u></em>:</h4>
<ul>
  <li><strong>BCT</strong>, which contains redundant instances of the <em><u>Boot Configuration Table</u></em>. This must be the first partition on the boot device.</li>
  <li><strong>NVC</strong> contains <em><u>TegraBoot</u></em>. This must be the second boot partition.</li>
  <li>The following boot partitions, PT through BPF, are part of the BFS.</li>
  <li><strong>PT</strong> contains layout information for each BFS, and indicates the beginning of each one. It is the first partition in the BFS.</li>
  <li><strong>TBC</strong> contains the <em><u>TegraBoot CPU-side binary</u></em>.</li>
  <li><strong>RP1</strong> contains <em><u>TegraBoot DTBs</u></em>.</li>
  <li><strong>EBT</strong> contains <em><u>CBoot</u></em>.</li>
  <li><strong>WB0</strong> contains the <em><u>warm boot binary</u></em>.</li>
  <li><strong>BPF</strong> contains <a href="/_post/embedded/linux/boot_process/jetson_nano#jetson-nano-bootloader-functionalities"><em><u>BPMP microcode</u></em></a></li>
  <li><strong>NVCâ€‘1</strong> contains a copy of NVC.</li>
  <li><strong>PTâ€‘1</strong> through BPFâ€‘1 are copy partitions for the primaries NVC through BPF, making up a copy of the BFS, denoted BFSâ€‘1.</li>
  <li><strong>PAD</strong> is an <em><u>empty partition</u></em> which ensures the VER and VER_b are at the very end of the boot partition.</li>
  <li><strong>VER_b</strong> contains additional <em><u>version information for redundancy and version checking</u></em>.</li>
  <li>
    <p><strong>VER</strong> contains version information.</p>
  </li>
  <li><strong>GP1</strong> contains the sdmmc_user deviceâ€™s <em><u>primary GPT</u></em>. All partitions defined after this one are configured in the Linux kernel, and are accessible by standard partition tools such as gdisk and parted.</li>
</ul>

<h5 id="references">References:</h5>
<ul>
  <li><a href="https://www.youtube.com/watch?v=DV5S_ZSdK0s&amp;t=6s&amp;ab_channel=PentesterAcademyTV">Embedded Linux Booting Process (Multi-Stage Bootloaders, Kernel, Filesystem)</a></li>
</ul>

:ET