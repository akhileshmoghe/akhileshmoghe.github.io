I"‹<h1 id="overview">Overview</h1>
<p>In this blog, we will explore how a Public key is created with RSA Asymmetric Key Encryption in an oversimplified version. We will know, how a shared secrete is shared between server and client, which is then used for further encrypted commnication after initial handshake.</p>

<h2 id="magic-of-public-key-cryptography">Magic of Public Key Cryptography:</h2>
<p>Hereâ€™s an oversimplified version of RSA Asymmetric Key Encryption:</p>

<ul>
  <li>Let <strong><em><u>n</u></em></strong> be a big integer (say 300 digits);</li>
  <li><strong><em><u>n</u></em></strong> is chosen such that it is a <em><u>product of two prime numbers of similar sizes</u></em> (letâ€™s call them <strong><em><u>p</u></em></strong> and <strong><em><u>q</u></em></strong>).</li>
  <li>We will then compute things <strong><em><u>modulo n</u></em></strong>: this means that whenever we <em><u>add or multiply together two integers</u></em>, we <em><u>divide the result by n</u></em> and we <em><u>keep the remainder</u></em> (which is between 0 and n-1, necessarily).
    <ul>
      <li>Given <em>x</em>, computing <strong><em><u>x<sup>3</sup> modulo n</u></em></strong> is easy:
        <ul>
          <li>you multiply x with x and then again with x, and then you divide by n and keep the remainder. Everybody can do that.</li>
        </ul>
      </li>
      <li>On the other hand, given <strong><em><u>x<sup>3</sup> modulo n</u></em></strong>, <u>recovering x seems overly difficult</u> (the best known methods being far too expensive for existing technology)</li>
      <li>â€“ unless you know <strong><em><u>p</u></em></strong> and <strong><em><u>q</u></em></strong>, in which case it becomes easy again.</li>
      <li>But computing <strong><em><u>p</u></em></strong> and <strong><em><u>q</u></em></strong> from <strong><em><u>n</u></em></strong> seems hard, too (it is the problem known as <a href="http://en.wikipedia.org/wiki/Integer_factorization">integer factorization</a>).<br />
Â </li>
    </ul>
  </li>
  <li>So here is what the server and client do:
    <ul>
      <li>The server has a <strong><em><u>n</u></em></strong> and knows the corresponding <strong><em><u>p</u></em></strong> and <strong><em><u>q</u></em></strong> (it generated them). The server sends <strong><em><u>n</u></em></strong> to the client.</li>
      <li>The client chooses a <em><u>random x</u></em> and computes <strong><em><u>x<sup>3</sup> modulo n</u></em></strong>.</li>
      <li>The client sends <strong><em><u>x<sup>3</sup> modulo n</u></em></strong> to the server.</li>
      <li>The server uses its knowledge of <strong><em><u>p</u></em></strong> and <strong><em><u>q</u></em></strong> to recover <strong><em><u>x</u></em></strong>.</li>
      <li>At that point, both client and server know <strong><em><u>x</u></em></strong>. But an eavesdropper saw only <strong><em><u>n</u></em></strong> and <strong><em><u>x<sup>3</sup> modulo n</u></em></strong>; he cannot recompute <strong><em><u>p</u></em></strong>, <strong><em><u>q</u></em></strong> and/or <strong><em><u>x</u></em></strong> from that information.<br />
Â </li>
    </ul>
  </li>
  <li>So <strong><em><u>x</u></em></strong> is a <strong><em><u>shared secret</u></em></strong> between the client and the server.</li>
  <li><strong><em><u>n</u></em></strong> is the <strong><em><u>RSA Public Key</u></em></strong> sent by the server.</li>
  <li>After that this is pretty straightforward <em><u>symmetric encryption</u></em>, using <strong><em><u>x</u></em></strong> a <strong><em><u>shared secret</u></em></strong> as key.<br />
Â </li>
</ul>

<h3 id="further-reading">Further Reading</h3>
<p>If interested in knowing actual RSA operations like Key-generation, Key-distribution, Encryption, Decryption; see <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Operation">Wikipedia RSA link</a>.</p>

<h2 id="a-cretificate">A Cretificate</h2>
<ul>
  <li>The certificate is a vessel for the server public key (<strong><em><u>n</u></em></strong>).</li>
  <li>It is used to thwart active attackers who would want to impersonate the server: such an attacker intercepts the communication and sends its value <strong><em><u>n</u></em></strong> instead of the serverâ€™s <strong><em><u>n</u></em></strong>.</li>
  <li>The certificate is signed by a <strong><em><u>certification authority</u></em></strong>, so that the client may know that a given <strong><em><u>n</u></em></strong> is really the genuine <strong><em><u>n</u></em></strong> from the server he wants to talk with.</li>
  <li>Digital signatures also use <em><u>asymmetric cryptography</u></em>, although in a distinct way (for instance, there is also a variant of <strong>RSA</strong> for digital signatures).</li>
</ul>

<p><br />
Â </p>
<h2 id="references">References</h2>
<ul>
  <li><a href="https://security.stackexchange.com/a/6296/214329">How is it possible that people observing an HTTPS connection being established wouldnâ€™t know how to decrypt it?</a></li>
</ul>

:ET